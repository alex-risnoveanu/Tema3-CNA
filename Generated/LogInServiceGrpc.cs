// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LogInService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Generated {
  public static partial class LogInService
  {
    static readonly string __ServiceName = "LogInService";

    static readonly grpc::Marshaller<global::Generated.LogInRequest> __Marshaller_LogInRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Generated.LogInRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Generated.Close> __Marshaller_Close = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Generated.Close.Parser.ParseFrom);

    static readonly grpc::Method<global::Generated.LogInRequest, global::Generated.Close> __Method_logIn = new grpc::Method<global::Generated.LogInRequest, global::Generated.Close>(
        grpc::MethodType.Unary,
        __ServiceName,
        "logIn",
        __Marshaller_LogInRequest,
        __Marshaller_Close);

    static readonly grpc::Method<global::Generated.LogInRequest, global::Generated.Close> __Method_logOut = new grpc::Method<global::Generated.LogInRequest, global::Generated.Close>(
        grpc::MethodType.Unary,
        __ServiceName,
        "logOut",
        __Marshaller_LogInRequest,
        __Marshaller_Close);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Generated.LogInServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LogInService</summary>
    [grpc::BindServiceMethod(typeof(LogInService), "BindService")]
    public abstract partial class LogInServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Generated.Close> logIn(global::Generated.LogInRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Generated.Close> logOut(global::Generated.LogInRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LogInService</summary>
    public partial class LogInServiceClient : grpc::ClientBase<LogInServiceClient>
    {
      /// <summary>Creates a new client for LogInService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LogInServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LogInService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LogInServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LogInServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LogInServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Generated.Close logIn(global::Generated.LogInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logIn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Generated.Close logIn(global::Generated.LogInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_logIn, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Generated.Close> logInAsync(global::Generated.LogInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logInAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Generated.Close> logInAsync(global::Generated.LogInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_logIn, null, options, request);
      }
      public virtual global::Generated.Close logOut(global::Generated.LogInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logOut(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Generated.Close logOut(global::Generated.LogInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_logOut, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Generated.Close> logOutAsync(global::Generated.LogInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logOutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Generated.Close> logOutAsync(global::Generated.LogInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_logOut, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LogInServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LogInServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LogInServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_logIn, serviceImpl.logIn)
          .AddMethod(__Method_logOut, serviceImpl.logOut).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LogInServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_logIn, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Generated.LogInRequest, global::Generated.Close>(serviceImpl.logIn));
      serviceBinder.AddMethod(__Method_logOut, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Generated.LogInRequest, global::Generated.Close>(serviceImpl.logOut));
    }

  }
}
#endregion
